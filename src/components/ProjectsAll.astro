---
import GitHub from "./icons/GitHub.astro";
import NextJS from "./icons/NextJS.astro";
import Tailwind from "./icons/Tailwind.astro";
import Link from "./icons/Link.astro";
import LinkButton from "./LinkButton.astro";
import Java from "./icons/Java.astro";
import Firebase from "./icons/Firebase.astro";
import Leaflet from "./icons/Leaflet.astro";
import Nodejs from "./icons/Nodejs.astro";
import Reactjs from "./icons/Reactjs.astro";
import Button from "./Button.astro";

const TAGS = {
  NEXT: {
    name: "Next.js",
    class: "bg-black text-white",
    icon: NextJS,
  },
  TAILWIND: {
    name: "Tailwind CSS",
    class: "bg-[#003159] text-white",
    icon: Tailwind,
  },
  NODE: {
    name: "Node.js",
    class: "bg-[#003159] text-white",
    icon: Nodejs,
  },
  JAVA: {
    name: "Java",
    class: "bg-[#003159] text-white",
    icon: Java,
  },
  FIREBASE: {
    name: "Firebase",
    class: "bg-[#003159] text-white",
    icon: Firebase,
  },
  LEAFLET: {
    name: "Leaflet.js",
    class: "bg-[#003159] text-white",
    icon: Leaflet,
  },
  REACTJS: {
    name: "React.js",
    class: "bg-[#003159] text-white",
    icon: Reactjs,
  },
};
const PROJECTS = [
  {
    ID: "1",
    title: "React - App de Consulta de Sitios Turistico",
    description:
      "Aplicación web con mapa interactivo para la consulta de centros turísticos ubicados en el Centro-Norte del Distrito Metropolitano de Quito. Se creo con desde cero con Node.js, React, Firebase y la libreria open source de mapas Leaflet.js ",
    link: "",
    github: "",
    images: [
      "/projects/MapaHome.webp",
      "/projects/Mapalogin.webp",
      "/projects/MapaReset.webp",
      "/projects/MapaRegister.webp",
      "/projects/MapaUser.webp",
      "/projects/MapaItinerario.webp",
      "/projects/Mapalogin.webp",
    ],
    tags: [TAGS.NODE, TAGS.REACTJS, TAGS.FIREBASE, TAGS.LEAFLET],
  },
  {
    ID: "2",
    title: "Java - App para Clínica Odontológica ",
    description:
      "Aplicación desarrollada en Java en el IDE NetBeans aplicando POO. La aplicación permite gestionar la agenda de citas, los historiales de pacientes, y la facturación del consultorio, las cuales las puedes generar en PDF.",
    link: "",
    github: "https://github.com/Nevmetal/Java-ClinicaOdontologicaCitas.git",
    images: [
      "/projects/JavaHome.webp",
      "/projects/JavaRegistro.webp",

      "/projects/JavaCita.webp",
      "/projects/JavaFactura.webp",
    ],
    tags: [TAGS.JAVA],
  },
];
---

{/*<div class="flex flex-col gap-y-16"> */}
<div class="flex flex-col gap-y-16">
  {
    PROJECTS.map(({ ID, images, title, description, tags, link, github }) => (
      <article class=" space-x-0 space-y-8  group md:flex-row md:space-x-8 md:space-y-0">
        <div class="carousel-container max-w-screen-md mx-auto relative overflow-hidden">
          <div class="carousel-slide flex">
            {images.map((image, index) => (
              <img
                alt={`Image project ${index}`}
                class="object-contain w-full h-56 min-w-full sm:h-full "
                loading="lazy"
                src={image}
              />
            ))}
          </div>
          <button
            class="absolute top-1/2 transform -translate-y-1/2 left-0 rounded-full bg-blue-400/50 text-white hover:bg-yellow-200 dark:hover:bg-slate-600  bg-opacity-50  text-sm md:text-3xl border-none cursor-pointer px-4 py-2  z-10"
            id={`prevBtn_${ID}`}
          >
            &lt;
          </button>
          <button
            class="absolute top-1/2 transform -translate-y-1/2 right-0 rounded-full  bg-blue-400/50 text-white  hover:bg-yellow-200 dark:hover:bg-slate-600 bg-opacity-50  text-sm md:text-3xl border-none cursor-pointer px-4 py-2  z-10"
            id={`nextBtn_${ID}`}
          >
            &gt;
          </button>
        </div>
        <div class="w-full">
          <h3 class="text-2xl font-bold text-gray-800 dark:text-gray-100">
            {title}
          </h3>
          <div class="flex flex-wrap mt-2">
            <ul class="grid grid-cols-2 sm:flex sm:flex-row mb-2 gap-2">
              {tags.map((tag) => (
                <li>
                  <span
                    class={`flex gap-x-2 rounded-full text-xs ${tag.class} py-1 px-2 `}
                  >
                    <tag.icon class="size-4" />
                    {tag.name}
                  </span>
                </li>
              ))}
            </ul>

            <div class="mt-2 text-gray-700 dark:text-gray-400">
              {description}
            </div>
            <footer class="flex items-end justify-start mt-4 gap-x-4">
              {github && (
                <LinkButton href={github}>
                  <GitHub class="size-6" />
                  Code
                </LinkButton>
              )}
              {link && (
                <LinkButton href={link}>
                  <Link class="size-4" />
                  Preview
                </LinkButton>
              )}
            </footer>
          </div>
        </div>
      </article>
    ))
  }
</div>

<script>
  document.addEventListener("astro:page-load", () => {
    const carousels = document.querySelectorAll(".carousel-slide");

    carousels.forEach((carousel, index) => {
      const images = carousel.querySelectorAll("img");
      const prevBtn = document.getElementById(
        `prevBtn_${index + 1}`
      ) as HTMLElement;
      const nextBtn = document.getElementById(
        `nextBtn_${index + 1}`
      ) as HTMLElement;

      let counter = 0;
      let size: number;
      function updateSize() {
        size = images[0].clientWidth;
      }
      // Update size initially
      updateSize();
      // Window resize listener to update size on resize
      window.addEventListener("resize", updateSize);
      // Mover hacia la imagen siguiente
      nextBtn.addEventListener("click", () => {
        if (counter >= images.length - 1) {
          counter = 0; // Regresa al inicio si es la última imagen
        } else {
          counter++;
        }
        (carousel as HTMLElement).style.transition =
          "transform 0.4s ease-in-out";
        (carousel as HTMLElement).style.transform =
          `translateX(${-size * counter}px)`;
      });

      // Mover hacia la imagen anterior
      prevBtn.addEventListener("click", () => {
        if (counter <= 0) return;
        (carousel as HTMLElement).style.transition =
          "transform 0.4s ease-in-out";
        counter--;
        (carousel as HTMLElement).style.transform =
          `translateX(${-size * counter}px)`;
      });

      // Reiniciar el carrusel al principio después de la última imagen
      carousel.addEventListener("transitionend", () => {
        if (images[counter].id === "lastClone") {
          (carousel as HTMLElement).style.transition = "none";
          counter = images.length - 2;
          (carousel as HTMLElement).style.transform =
            `translateX(${-size * counter}px)`;
        }
        if (images[counter].id === "firstClone") {
          (carousel as HTMLElement).style.transition = "none";
          counter = images.length - counter;
          (carousel as HTMLElement).style.transform =
            `translateX(${-size * counter}px)`;
        }
      });
    });
  });
  document.addEventListener("change", () => {
    const carousels = document.querySelectorAll(".carousel-slide");

    carousels.forEach((carousel, index) => {
      const images = carousel.querySelectorAll("img");
      const prevBtn = document.getElementById(
        `prevBtn_${index + 1}`
      ) as HTMLElement;
      const nextBtn = document.getElementById(
        `nextBtn_${index + 1}`
      ) as HTMLElement;

      let counter = 0;
      const size = images[0].clientWidth;

      // Mover hacia la imagen siguiente
      nextBtn.addEventListener("click", () => {
        if (counter >= images.length - 1) {
          counter = 0; // Regresa al inicio si es la última imagen
        } else {
          counter++;
        }
        (carousel as HTMLElement).style.transition =
          "transform 0.4s ease-in-out";
        (carousel as HTMLElement).style.transform =
          `translateX(${-size * counter}px)`;
      });

      // Mover hacia la imagen anterior
      prevBtn.addEventListener("click", () => {
        if (counter <= 0) return;
        (carousel as HTMLElement).style.transition =
          "transform 0.4s ease-in-out";
        counter--;
        (carousel as HTMLElement).style.transform =
          `translateX(${-size * counter}px)`;
      });

      // Reiniciar el carrusel al principio después de la última imagen
      carousel.addEventListener("transitionend", () => {
        if (images[counter].id === "lastClone") {
          (carousel as HTMLElement).style.transition = "none";
          counter = images.length - 2;
          (carousel as HTMLElement).style.transform =
            `translateX(${-size * counter}px)`;
        }
        if (images[counter].id === "firstClone") {
          (carousel as HTMLElement).style.transition = "none";
          counter = images.length - counter;
          (carousel as HTMLElement).style.transform =
            `translateX(${-size * counter}px)`;
        }
      });
    });
  });
</script>
